[{"categories":null,"content":"我的第第一篇博客？？ #include\"stdio.h\" int main(){ printf(\"youdu\"); return 0; //测试 代码块 } ","date":"2020-05-06","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":["Python语言程序设计"],"content":"Python的学习总是很有趣，强大的库让人欲罢不能，即使作为初学者的我来说，用代码绘图是极具诱惑力的，而Turtle库是Python语言中一个很流行的绘制图像的函数库，它的使用方法也很简答，只要我们把自己想象成一个小乌龟，在一个横轴为x、纵轴为y的坐标系原点，(0,0)位置开始，它根据一组函数指令的控制，在这个平面坐标系中移动，从而在它爬行的路径上绘制了图形。只要了解一些基本概念就可以快速上手。 ","date":"2020-04-20","objectID":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/:0:0","tags":["Python语言程序设计","Turtle库","绘图"],"title":"用Python绘图之Turtle(海龟)库详解","uri":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/"},{"categories":["Python语言程序设计"],"content":"1. 画布(canvas) 画布就是turtle为我们展开用于绘图区域，我们可以设置它的大小和初始位置。 设置画布大小 1、 turtle.screensize(canvwidth=None, canvheight=None, bg=None) 参数分别为画布的宽(单位像素), 高, 背景颜色。 如： turtle.screensize(800,600, \"green\") turtle.screensize() #返回默认大小(400, 300) 2、 turtle.setup(width=0.5, height=0.75, startx=None, starty=None) 参数：width, height: 输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例，(startx, starty): 这一坐标表示矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心。 如： turtle.setup(width=0.6,height=0.6) turtle.setup(width=800,height=800, startx=100, starty=100) ","date":"2020-04-20","objectID":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/:0:1","tags":["Python语言程序设计","Turtle库","绘图"],"title":"用Python绘图之Turtle(海龟)库详解","uri":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/"},{"categories":["Python语言程序设计"],"content":"2、画笔 在画布上，默认有一个坐标原点为画布中心的坐标轴，坐标原点上有一只面朝x轴正方向小乌龟。这里我们描述小乌龟时使用了两个词语：坐标原点(位置)，面朝x轴正方向(方向)， turtle绘图中，就是使用位置方向描述小乌龟(画笔)的状态。 设置画笔的宽度，单位为像素； turtle.pensize()： 2)没有参数传入，返回当前画笔颜色，传入参数设置画笔颜色，可以是字符串如\"green”, “red”,也可以是RGB 3元组。 turtle.pencolor()： 3)设置画笔移动速度，画笔绘制的速度范围[0,10]整数，数字越大越快。 turtle.speed(speed)： (1)画笔运动命令 命令 说明 turtle.forward(distance) 向当前画笔方向移动distance像素长度 turtle.backward(distance) 向当前画笔相反方向移动distance像素长度 turtle.right(degree) 顺时针移动degree° turtle.left(degree) 逆时针移动degree° turtle.pendown() 移动时绘制图形，缺省时也为绘制 turtle.goto(x,y) 将画笔移动到坐标为x,y的位置 turtle.penup() 提起笔移动，不绘制图形，用于另起一个地方绘制 turtle.circle() 画圆，半径为正(负)，表示圆心在画笔的左边(右边)画圆 setx( ) 将当前x轴移动到指定位置 sety( ) 将当前y轴移动到指定位置 setheading(angle) 设置当前朝向为angle角度 home() 设置当前画笔位置为原点，朝向东。 dot( r ) 绘制一个指定直径和颜色的圆点 (2)画笔控制命令 命令 说明 turtle.fillcolor(colorstring) 绘制图形的填充颜色 turtle.color(color1, color2) 同时设置pencolor=color1, fillcolor=color2 turtle.filling() 返回当前是否在填充状态 turtle.begin_fill() 准备开始填充图形 turtle.end_fill() 填充完成 turtle.hideturtle() 隐藏画笔的turtle形状 turtle.showturtle() 显示画笔的turtle形状 (3)全局控制命令 命令 说明 turtle.clear() 清空turtle窗口，但是turtle的位置和状态不会改变 turtle.reset() 清空窗口，重置turtle状态为起始状态 turtle.undo() 撤销上一个turtle动作 turtle.isvisible() 返回当前turtle是否可见 stamp() 复制当前图形 turtle.write(s [,font=(“font-name”,font_size,“font_type”)]) 写文本，s为文本内容，font是字体的参数，分别为字体名称，大小和类型；font为可选项，font参数也是可选项 (4)其它 命令 说明 turtle.mainloop()或turtle.done() 启动事件循环 -调用Tkinter的mainloop函数。必须是乌龟图形程序中的最后一个语句。 turtle.mode(mode=None) 设置乌龟模式（“standard”，“logo”或“world”）并执行重置。如果没有给出模式，则返回当前模式。standard向右（东）逆时针；logo向上（北）顺时针 turtle.delay(delay=None) 设置或返回以毫秒为单位的绘图延迟。 turtle.begin_poly() 开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点。 turtle.end_poly() 停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点。将与第一个顶点相连。 turtle.get_poly() 返回最后记录的多边形。 ","date":"2020-04-20","objectID":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/:0:2","tags":["Python语言程序设计","Turtle库","绘图"],"title":"用Python绘图之Turtle(海龟)库详解","uri":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/"},{"categories":["Python语言程序设计"],"content":"3、命令详解 turtle.circle(radius, extent=None, steps=None) 描述：以给定半径画圆 参数： radius(半径)：半径为正(负)，表示圆心在画笔的左边(右边)画圆； extent(弧度) (optional)； steps (optional) (做半径为radius的圆的内切正多边形，多边形边数为steps)。 举例: circle(50) # 整圆; circle(50,steps=3) # 三角形; circle(120, 180) # 半圆 #第一次用turtle画画。 import turtle a = 0 turtle.setup(800, 500) #设置宽为800高为500窗口位于屏幕中心 turtle.penup() #把笔抬起来 turtle.fd(-250) #向前移动-250个像素点（也就是后退250个像素点） turtle.pendown() #把笔放下 turtle.pensize(5) #设置笔的大小为25个像素 turtle.pencolor(\"red\")#设置笔的颜色为紫色 turtle.seth(-40) #海龟头的方向为-40° for i in range(5): #循环执行四次 turtle.circle(40, 80)#以40像素为半径（左边）绘制80度的弧度 a = a+3 #让蛇的身体慢慢变大 print(a) turtle.pensize(5 + a) turtle.circle(-40, 80)#以40像素为半（右边）径绘制80度的弧度 a = a+3 print(a) turtle.pensize(5 + a) turtle.seth(0) #将龟头调整到零度，也就是向X轴正方向 turtle.fd(50) #前进50个像素 turtle.circle(30, 180) #以像素30为半径向此时龟头方向以左的方向绘制180度弧形 turtle.pensize(40) #画笔变大 turtle.fd(40) #前进40个像素 turtle.pensize(7) #画笔变小 turtle.fd(30) #前进30像素 turtle.pensize(4) #画笔大小为4像素 turtle.circle(15,60) #画弧 turtle.circle(15,-60) #画弧，返回 turtle.circle(-15,60) #画弧 turtle.circle(-15,-60) #画弧，返回 turtle.backward(40) #后退40 turtle.seth(90) #龟头方向调整为90 turtle.fd(10) #前进10 turtle.pencolor(\"black\") #改变颜色为黑 turtle.circle(5) #画眼睛 turtle.penup() #抬起笔 turtle.backward(20) #后退20 turtle.pendown() #放下笔 turtle.circle(5) #画眼睛 turtle.hideturtle() #隐藏乌龟 turtle.done() #保持窗口不关闭 效果如下 ‘‘后来又参考别人的代码做了个时钟。。。 # coding=utf-8 import turtle from datetime import * # 抬起画笔，向前运动一段距离放下 def Skip(step): turtle.penup() turtle.forward(step) turtle.pendown() def mkHand(name, length): # 注册Turtle形状，建立表针Turtle turtle.reset() Skip(-length * 0.1) # 开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点。 turtle.begin_poly() turtle.forward(length * 1.1) # 停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点。将与第一个顶点相连。 turtle.end_poly() # 返回最后记录的多边形。 handForm = turtle.get_poly() turtle.register_shape(name, handForm) def Init(): global secHand, minHand, hurHand, printer # 重置Turtle指向北 turtle.mode(\"logo\") # 建立三个表针Turtle并初始化 mkHand(\"secHand\", 135) mkHand(\"minHand\", 125) mkHand(\"hurHand\", 90) secHand = turtle.Turtle() secHand.shape(\"secHand\") minHand = turtle.Turtle() minHand.shape(\"minHand\") hurHand = turtle.Turtle() hurHand.shape(\"hurHand\") for hand in secHand, minHand, hurHand: hand.shapesize(1, 1, 3) hand.speed(0) # 建立输出文字Turtle printer = turtle.Turtle() # 隐藏画笔的turtle形状 printer.hideturtle() printer.penup() def SetupClock(radius): # 建立表的外框 turtle.reset() turtle.pensize(7) turtle.pencolor(\"black\") turtle.fillcolor(\"green\") for i in range(60): Skip(radius) if i % 5 == 0: turtle.forward(20) Skip(-radius - 20) Skip(radius + 20) if i == 0: turtle.write(int(12), align=\"center\", font=(\"Courier\", 14, \"bold\")) elif i == 30: Skip(25) turtle.write(int(i / 5), align=\"center\", font=(\"Courier\", 14, \"bold\")) Skip(-25) elif (i == 25 or i == 35): Skip(20) turtle.write(int(i / 5), align=\"center\", font=(\"Courier\", 14, \"bold\")) Skip(-20) else: turtle.write(int(i / 5), align=\"center\", font=(\"Courier\", 14, \"bold\")) Skip(-radius - 20) else: turtle.dot(5) Skip(-radius) turtle.right(6) def Week(t): week = [\"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\", \"星期日\"] return week[t.weekday()] def Date(t): y = t.year m = t.month d = t.day return \"%s-%d-%d\" % (y, m, d) def Tick(): # 绘制表针的动态显示 t = datetime.today() second = t.second + t.microsecond * 0.000001 minute = t.minute + second / 60.0 hour = t.hour + minute / 60.0 secHand.setheading(6 * second) minHand.setheading(6 * minute) hurHand.setheading(30 * hour) turtle.tracer(False) printer.forward(65) printer.write(Week(t), align=\"center\", font=(\"Courier\", 14, \"bold\")) printer.back(130) printer.write(Date(t), align=\"center\", font=(\"Courier\", 14, \"bold\")) printer.home() turtle.tracer(True) # 100ms后继续调用tick turtle.ontimer(Tick, 100) def main(): # 打开/关闭龟动画，并为更新图纸设置延迟。 turtle.tracer(False) Init() SetupClock(160) turtle.tracer(True) Tick() turtle.mainloop() if __name__ == \"__main__\": main() 效果如图 再后来我我看见了git优秀的项目。。。 # coding:utf-8 from turtle import* def nose(x,y):#鼻子 pu() goto(x,y) pd() seth(-30) begin_fill() a=0.4 for i in range(120): if 0\u003c=i\u003c30 or 60\u003c=i\u003c90: a=a+0.08 lt(","date":"2020-04-20","objectID":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/:0:3","tags":["Python语言程序设计","Turtle库","绘图"],"title":"用Python绘图之Turtle(海龟)库详解","uri":"/py4_%E7%94%A8python%E7%BB%98%E5%9B%BE%E4%B9%8Bturtle%E6%B5%B7%E9%BE%9F%E5%BA%93%E8%AF%A6%E8%A7%A3/"},{"categories":["Python语言程序设计"],"content":"我为什么选择Python作为第二门系统学习的计算机编程语言？ 我听说过很多编程语言，比如Basic, C,C++, C#, CSS, Fortran, Go, HTML, Java, JavaScript, Lisp, Lua, Matlab, Object C, Pascal, Perl, PHP, PostScript, Python, Ruby, Scala, SQL, Swift, VBA, VB.NET, Verilog, VHDL, Visual Basic等等。各编程语言所处历史时期和使命不同，但是作为我都第二门系统学习的计算机编程语言来说，通过比较他们的各方面，以及仔细想想未来所从事的工作来说，Python刚好是我需要的。 2018年以后的计算环境…计算机性能不再是解决一般问题的瓶颈移动互联网广泛普及大数据、云计算、物联网、信息安全、人工智能等需求爆发，如果不为以后做准备，那将会在这个社会上难以生存。 人生苦短，我学Python 经常有人开玩笑说，如果执行一个项目，C需要1000行代码，Java需要100行代码，而Python只需要10行代码，虽然这有夸张的成分在，但不可否认的是，python相对于其它计算机编程语言的代码量确实要少一些。Python 是最接近 AI 的语言，Python 被称为是机器学习最优秀的语言，没有之一。这也是我为什么想要学习Python最重要的原因。 ","date":"2020-04-17","objectID":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/:0:0","tags":["Python语言程序设计","Python优点","Python缺点"],"title":"为什么要学习Python？","uri":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/"},{"categories":["Python语言程序设计"],"content":"优点 1.Python是一种脚本语言，写好了就可以直接运行，省去了编译链接的麻烦，对于需要多动手实践的初学者而言，也就是少了出错的机会。 2.Python还有一种交互的方式，如果是一段简单的小程序，连编辑器都可以省了，直接敲进去就能运行。 3.Python提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（Batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。 4.使用Python写程序很容易懂，这是很多人的共识。Python是一种面向对象的语言，但它的面向对象却不象C++那样强调概念，而是更注重实用。而是用最简单的方法让编程者能够感受到面向对象带来的好处，这正是Python能像Java、C#那样吸引众多支持者的原因之一。 ","date":"2020-04-17","objectID":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/:0:1","tags":["Python语言程序设计","Python优点","Python缺点"],"title":"为什么要学习Python？","uri":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/"},{"categories":["Python语言程序设计"],"content":"缺点 1.运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。 2.代码不能加密。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。 参考资料:Python语言程序设计基础(第2版)》嵩天、礼欣、黄天羽著，高等教育出版社，2017.2（讲授Python 3版本） 视频课程 ","date":"2020-04-17","objectID":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/:0:2","tags":["Python语言程序设计","Python优点","Python缺点"],"title":"为什么要学习Python？","uri":"/py1_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0python/"},{"categories":["其它"],"content":"为什么要写博客？ 几乎每一个程序员都听说过写博客有很多好处，但真的动手去写的却很少。其中有一个很重要的原因就是，有些人心里会认为：我不是大牛，写出来的博客没意义。其实我没创建博客之前也是这么想的，我身边没有一个人是写博客的。难道是我身处二本学校的缘故吗？我思考了好几天，好几天失眠，最终无果。 我是一个不会轻易的向困难低头，更不会轻易认输的人。虽然我来自一个普通的二本学校，但我相信习大大说的话，幸福都是奋斗出来的。努力不一定成功，但不努力是真的好爽。都说万事开头难，我们不管做什么事，最难的就是从零到一的过程。只要你跨过了，什么都是那么的自然。不管写的多差，只要我坚持，总能找到感觉的 我总是说我的表达能力还不行。从另一方面也说明，我对这个问题或是知识点了解得还不够透彻。如果我知道了来龙去脉、前因后果不会说得不清除的。 人都有一个遗忘规律。现在我认为已经烂记于心的东西，几个月后说不定就模糊了。其实，很多时候我们都是在反复的记忆遗忘做斗争。当然，这也是为以后工作做准备，如果遗忘了某些知识，至少还能回头看看，不至于重新学。 通过博客轨迹，我以后也可以看到自己的成长轨迹。我都做过些什么，以后应该怎么做，以至于不忘初心，不迷失自己。 Hello World 中文意思是『你好,世界』。因为《The C Programming Language》中使用它做为第一个演示程序，后来成为了的大多数程序员在学习编程时的第一课内容。现在我就用Hello myblog来开始我的博客生涯吧！ 1 #include \u003cstdio.h\u003e 2 3 int main() 4 { 5 printf(\"Hello World！\\n\"); printf(\"Hello myblog！\\n\"); 6 return 0; 7 } 本博客网站建成于2020年3月26日，在建成之前，我其实也有断断续续的写过博文。 ","date":"2020-03-26","objectID":"/hellomyblog/:0:0","tags":["其它"],"title":"Hello Myblog","uri":"/hellomyblog/"},{"categories":["计算机组成原理"],"content":"《计算机组成原理》是电子信息工程专业大二下学期的一门核心专业基础课。它的主要内容：介绍运算器、控制器、存储器的结构、工作原理、设计方法及互连构成整机的有关技术。 ","date":"2020-03-01","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/:0:0","tags":["计算机组成原理"],"title":"《计算机组成原理》导学","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/"},{"categories":["计算机组成原理"],"content":"1.1为什么要学习计算机组成原理 总的来说主要有以下五点理由： ①核心专业基础课，在课程体系中承上启下的作用 ②后PC时代技术发展的迫切需求–专业地位更加凸显 ③我国信息产业发展的迫切需求 ④服务于国家战略的迫切需求 ⑤增加自身的知识深度和广度 ","date":"2020-03-01","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/:0:1","tags":["计算机组成原理"],"title":"《计算机组成原理》导学","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/"},{"categories":["计算机组成原理"],"content":"1.2计算机组成原理主要学什么 1.计算机系统概述 冯诺依曼结构计算机工作原理 计算机系统层次结构 计算机系统性能评价 2.数据表示 机器数及特点 定点数与浮点数据表示 数据校验基本原理 奇偶校验及其实现 CRC校验及其实现 海明校验及其实现 3.运算方法与运算器 补码加/减运算 溢出检测 补码加/减运算器设计 补码一位乘法 乘法运算器设计 补码一位除法 除法运算器设计 浮点数加减运算 4.存储系统 存储系统层次结构 主存的工作原理及数据组织 静态存储器工作原理 动态存储器工作原理 存储器扩展多体交叉存储器 Cache的基本原理 全相联映射 直接映射 组相联映射 替换算法 Cache例题选讲(一) 页式虚拟存储器的工作原理 TLB的工作原理 磁盘工作原理 RAID技术 5.指令系统 指令系统概述及指令格式 指令的寻址方式 操作数寻址方式 数据寻址方式特点对比分析 指令格式设计 MIPS指令系统简介 6.CPU CPU的组成与功能 数据通路 数据通路与总线结构 数据通路实例 指令周期 总线结构CPU指令周期 硬布线控制器 微程序控制器 微指令格式 单周期CPU 多周期CPU CPU设计 7.系统总线 总线的特征及应用 总线性能与总线事务 总线连接方式 总线仲裁和数据传输 总线标准 8.输入/输出系统 输入输出接口概述 输入输出方式 中断请求与响应 DMA 应用举例 ","date":"2020-03-01","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/:0:2","tags":["计算机组成原理"],"title":"《计算机组成原理》导学","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/"},{"categories":["计算机组成原理"],"content":"1.3如何学好计算机组成原理 ①三观学习视角和学习方法（构造观、系统观、工程观） ②多实践 01利用仿真软件Logisim设计学习过的硬件功能部件或系统； 02尽量在FPGA开发板上基于EDA软件实现所设计的部件或系统。 参考资料 ","date":"2020-03-01","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/:0:3","tags":["计算机组成原理"],"title":"《计算机组成原理》导学","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AF%BC%E5%AD%A6/"},{"categories":null,"content":"计算机组成原理 STM32F103资料（洋桃开发版)提取码：77ru 晋中STM32资料 提取码: tbin ","date":"0001-01-01","objectID":"/file/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/:0:0","tags":null,"title":"参考资料","uri":"/file/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"},{"categories":null,"content":"DEV C++ ","date":"0001-01-01","objectID":"/file/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/:0:0","tags":null,"title":"开发工具/软件","uri":"/file/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"}]